import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -defaultplatform com.armax.styles 1.0 imports'

Module {
    dependencies: ["QtQuick 2.7"]
    Component {
        prototype: "QObject"
        name: "com.armax.styles/XDarkBlueStyle 1.0"
        exports: ["com.armax.styles/XDarkBlueStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "useGradients"; type: "bool" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "fontColor"; type: "QColor" }
        Property { name: "fontColorWhenDisabled"; type: "QColor" }
        Property { name: "controlsFontColor"; type: "QColor" }
        Property { name: "defaultFontSize"; type: "int" }
        Property { name: "defaultControlsHeight"; type: "int" }
        Property { name: "colorWhenDefault"; type: "QColor" }
        Property { name: "colorWhenPressed"; type: "QColor" }
        Property { name: "colorWhenHovered"; type: "QColor" }
        Property { name: "colorWhenChecked"; type: "QColor" }
        Property { name: "colorWhenDisabled"; type: "QColor" }
        Property { name: "handleColorWhenDefault"; type: "QColor" }
        Property { name: "handleColorWhenPressed"; type: "QColor" }
        Property { name: "handleColorWhenHovered"; type: "QColor" }
        Property { name: "handleColorWhenChecked"; type: "QColor" }
        Property { name: "handleColorWhenDisabled"; type: "QColor" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "borderColorWhenDefault"; type: "QColor" }
        Property { name: "borderColorWhenPressed"; type: "QColor" }
        Property { name: "borderColorWhenHovered"; type: "QColor" }
        Property { name: "borderColorWhenChecked"; type: "QColor" }
        Property { name: "borderColorWhenDisabled"; type: "QColor" }
        Property { name: "handleBorderColorWhenDefault"; type: "QColor" }
        Property { name: "handleBorderColorWhenPressed"; type: "QColor" }
        Property { name: "handleBorderColorWhenHovered"; type: "QColor" }
        Property { name: "handleBorderColorWhenChecked"; type: "QColor" }
        Property { name: "handleBorderColorWhenDisabled"; type: "QColor" }
        Property { name: "gradientWhenDefault"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenPressed"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenHovered"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenChecked"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenDisabled"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenDefault"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenPressed"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenHovered"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenChecked"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenDisabled"; type: "QQuickGradient"; isPointer: true }
        Property { name: "radius"; type: "int" }
        Property { name: "controlAnimationDuration"; type: "double" }
    }
    Component {
        prototype: "QObject"
        name: "com.armax.styles/XDarkRedStyle 1.0"
        exports: ["com.armax.styles/XDarkRedStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "useGradients"; type: "bool" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "fontColor"; type: "QColor" }
        Property { name: "fontColorWhenDisabled"; type: "QColor" }
        Property { name: "controlsFontColor"; type: "QColor" }
        Property { name: "defaultFontSize"; type: "int" }
        Property { name: "defaultControlsHeight"; type: "int" }
        Property { name: "colorWhenDefault"; type: "QColor" }
        Property { name: "colorWhenPressed"; type: "QColor" }
        Property { name: "colorWhenHovered"; type: "QColor" }
        Property { name: "colorWhenChecked"; type: "QColor" }
        Property { name: "colorWhenDisabled"; type: "QColor" }
        Property { name: "handleColorWhenDefault"; type: "QColor" }
        Property { name: "handleColorWhenPressed"; type: "QColor" }
        Property { name: "handleColorWhenHovered"; type: "QColor" }
        Property { name: "handleColorWhenChecked"; type: "QColor" }
        Property { name: "handleColorWhenDisabled"; type: "QColor" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "borderColorWhenDefault"; type: "QColor" }
        Property { name: "borderColorWhenPressed"; type: "QColor" }
        Property { name: "borderColorWhenHovered"; type: "QColor" }
        Property { name: "borderColorWhenChecked"; type: "QColor" }
        Property { name: "borderColorWhenDisabled"; type: "QColor" }
        Property { name: "handleBorderColorWhenDefault"; type: "QColor" }
        Property { name: "handleBorderColorWhenPressed"; type: "QColor" }
        Property { name: "handleBorderColorWhenHovered"; type: "QColor" }
        Property { name: "handleBorderColorWhenChecked"; type: "QColor" }
        Property { name: "handleBorderColorWhenDisabled"; type: "QColor" }
        Property { name: "gradientWhenDefault"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenPressed"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenHovered"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenChecked"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenDisabled"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenDefault"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenPressed"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenHovered"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenChecked"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenDisabled"; type: "QQuickGradient"; isPointer: true }
        Property { name: "radius"; type: "int" }
        Property { name: "controlAnimationDuration"; type: "double" }
    }
    Component {
        prototype: "QObject"
        name: "com.armax.styles/XFlatDarkBlueStyle 1.0"
        exports: ["com.armax.styles/XFlatDarkBlueStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "useGradients"; type: "bool" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "fontColor"; type: "QColor" }
        Property { name: "fontColorWhenDisabled"; type: "QColor" }
        Property { name: "controlsFontColor"; type: "QColor" }
        Property { name: "defaultFontSize"; type: "int" }
        Property { name: "defaultControlsHeight"; type: "int" }
        Property { name: "colorWhenDefault"; type: "QColor" }
        Property { name: "colorWhenPressed"; type: "QColor" }
        Property { name: "colorWhenHovered"; type: "QColor" }
        Property { name: "colorWhenChecked"; type: "QColor" }
        Property { name: "colorWhenDisabled"; type: "QColor" }
        Property { name: "handleColorWhenDefault"; type: "QColor" }
        Property { name: "handleColorWhenPressed"; type: "QColor" }
        Property { name: "handleColorWhenHovered"; type: "QColor" }
        Property { name: "handleColorWhenChecked"; type: "QColor" }
        Property { name: "handleColorWhenDisabled"; type: "QColor" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "borderColorWhenDefault"; type: "QColor" }
        Property { name: "borderColorWhenPressed"; type: "QColor" }
        Property { name: "borderColorWhenHovered"; type: "QColor" }
        Property { name: "borderColorWhenChecked"; type: "QColor" }
        Property { name: "borderColorWhenDisabled"; type: "QColor" }
        Property { name: "handleBorderColorWhenDefault"; type: "QColor" }
        Property { name: "handleBorderColorWhenPressed"; type: "QColor" }
        Property { name: "handleBorderColorWhenHovered"; type: "QColor" }
        Property { name: "handleBorderColorWhenChecked"; type: "QColor" }
        Property { name: "handleBorderColorWhenDisabled"; type: "QColor" }
        Property { name: "gradientWhenDefault"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenPressed"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenHovered"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenChecked"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenDisabled"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenDefault"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenPressed"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenHovered"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenChecked"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenDisabled"; type: "QQuickGradient"; isPointer: true }
        Property { name: "radius"; type: "int" }
        Property { name: "controlAnimationDuration"; type: "double" }
    }
    Component {
        prototype: "QObject"
        name: "com.armax.styles/XStyle 1.0"
        exports: ["com.armax.styles/XStyle 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "useGradients"; type: "bool" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "fontColor"; type: "QColor" }
        Property { name: "fontColorWhenDisabled"; type: "QColor" }
        Property { name: "controlsFontColor"; type: "QColor" }
        Property { name: "defaultFontSize"; type: "int" }
        Property { name: "defaultControlsHeight"; type: "int" }
        Property { name: "colorWhenDefault"; type: "QColor" }
        Property { name: "colorWhenPressed"; type: "QColor" }
        Property { name: "colorWhenHovered"; type: "QColor" }
        Property { name: "colorWhenChecked"; type: "QColor" }
        Property { name: "colorWhenDisabled"; type: "QColor" }
        Property { name: "handleColorWhenDefault"; type: "QColor" }
        Property { name: "handleColorWhenPressed"; type: "QColor" }
        Property { name: "handleColorWhenHovered"; type: "QColor" }
        Property { name: "handleColorWhenChecked"; type: "QColor" }
        Property { name: "handleColorWhenDisabled"; type: "QColor" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "borderColorWhenDefault"; type: "QColor" }
        Property { name: "borderColorWhenPressed"; type: "QColor" }
        Property { name: "borderColorWhenHovered"; type: "QColor" }
        Property { name: "borderColorWhenChecked"; type: "QColor" }
        Property { name: "borderColorWhenDisabled"; type: "QColor" }
        Property { name: "handleBorderColorWhenDefault"; type: "QColor" }
        Property { name: "handleBorderColorWhenPressed"; type: "QColor" }
        Property { name: "handleBorderColorWhenHovered"; type: "QColor" }
        Property { name: "handleBorderColorWhenChecked"; type: "QColor" }
        Property { name: "handleBorderColorWhenDisabled"; type: "QColor" }
        Property { name: "gradientWhenDefault"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenPressed"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenHovered"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenChecked"; type: "QQuickGradient"; isPointer: true }
        Property { name: "gradientWhenDisabled"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenDefault"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenPressed"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenHovered"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenChecked"; type: "QQuickGradient"; isPointer: true }
        Property { name: "handleGradientWhenDisabled"; type: "QQuickGradient"; isPointer: true }
        Property { name: "radius"; type: "int" }
        Property { name: "controlAnimationDuration"; type: "double" }
    }
}
